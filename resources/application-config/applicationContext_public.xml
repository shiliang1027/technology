<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd">

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.driverClass}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.jdbcUrl}</value>
		</property>
		<property name="user">
			<value>${jdbc.user}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="minPoolSize">
			<value>10</value>
		</property>
		<property name="maxPoolSize">
			<value>50</value>
		</property>
		<property name="maxIdleTime">
			<value>60</value>
		</property>
		<property name="acquireIncrement">
			<value>2</value>
		</property>
		<property name="maxStatements">
			<value>0</value>
		</property>
		<property name="initialPoolSize">
			<value>10</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>


	<!-- hibernate session factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath:/**/mapper/*.hbm.xml</value>
				<value>classpath:/com/system/config/dao/mapper/*.hbm.xml</value>
			</list>
		</property>

		<property name="hibernateProperties">
			<props>
				<!-- MySQL -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- Oracle -->
				<!-- <prop key="hibernate.dialect">org.hibernate.dialect.Oracle9Dialect</prop> -->
				<prop key="hibernate.query.substitutions">true=1 false=0</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.show_sql">true</prop>
				<!-- A simple in-memory Hashtable-based cache impl. <prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop> -->
				<!-- Use EHCache but not the query cache. -->
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.Provider</prop>

				<!-- Use EHCache <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop> -->
				<!-- Disable second-level cache, effectively <prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop> -->
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<prop key="hibernate.cache.use_minimal_puts">false</prop>
				<prop key="hibernate.jdbc.batch_versioned_data">false</prop>
				<prop key="hibernate.jdbc.batch_size">0</prop>
				<prop key="hibernate.connection.autocommit">true</prop>
				<prop key="hibernate.connnection.charSet">utf8</prop>
			</props>
		</property>

		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean
						class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener" />
				</entry>
			</map>
		</property>
	</bean>

	<!-- hibernate transactionManager -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:jpaConfig.xml" />
		<property name="mapperLocations">
			<list>
				<value>
					classpath*:com/**/mapper/common/*Mapper.xml
				</value>
				<value>
					classpath*:com/**/mapper/mysql/*Mapper.xml
				</value>
			</list>
		</property>
	</bean>

	<!-- activiti start-->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseSchemaUpdate" value="true" />
		<property name="jobExecutorActivate" value="false" />
		<!-- 生成流程图的字体 -->
        <property name="activityFontName" value="宋体"/>
        <property name="labelFontName" value="宋体"/>
		<!-- 自动部署 -->
        <property name="deploymentResources">
            <list>
                <value>classpath*:/deployments/*</value>
            </list>
        </property>
	</bean>
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService"/>
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>
    <!-- activiti end-->

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/index.html" />
		<property name="successUrl" value="/main.html" />
		<property name="unauthorizedUrl" value="/index.html" />
		<property name="filterChainDefinitions">
			<value>
				/index.html = anon
				/login.html = anon
				/register.html = anon
				/passwordforget.html = anon
				/js/** = anon
				/css/** = anon
				/images/** = anon
				/easyui/** = anon
				/** = authc
			</value>
		</property>
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 单realm应用。如果有多个realm，使用‘realms’属性代替 -->
		<property name="realm" ref="sampleRealm" />
		<property name="cacheManager" ref="cacheManager" />
	</bean>
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager" />

	<bean id="sampleRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
		<property name="dataSource" ref="dataSource" />
		<property name="authenticationQuery"
			value="select t.pwd_ from act_id_user t where t.id_ = ?" />
		<property name="userRolesQuery"
			value="select t.group_id_ from act_id_membership t where t.user_id_ = ? " />
		<property name="permissionsQuery"
			value="select b.permissionName from role t left join role_permission a on t.roleId = a.roleId left join permission b on a.permissionId = b.permissionId where t.roleName = ? " />
		<property name="permissionsLookupEnabled" value="false" />
		<property name="saltStyle" value="NO_SALT" />
<!-- 		<property name="credentialsMatcher" ref="hashedCredentialsMatcher" /> -->
	</bean>

	<bean id="hashedCredentialsMatcher"
		class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="MD5" />
		<property name="storedCredentialsHexEncoded" value="true" />
		<property name="hashIterations" value="1" />
	</bean>

	<!-- 应用程序初始配置 -->
	<import resource="classpath:/com/system/config/applicationContext-config.xml" />
</beans>